{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amt",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numOfTokens",
          "type": "uint256"
        }
      ],
      "name": "calculateCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numberOfTokens",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60a060405266038d7ea4c680006080523480156200001c57600080fd5b50604051806040016040528060088152602001673134b7ba37b5b2b760c11b81525060405180604001604052806002815260200161109560f21b81525081600390816200006a919062000127565b50600462000079828262000127565b505050620001f3565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000ad57607f821691505b602082108103620000ce57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200012257600081815260208120601f850160051c81016020861015620000fd5750805b601f850160051c820191505b818110156200011e5782815560010162000109565b5050505b505050565b81516001600160401b0381111562000143576200014362000082565b6200015b8162000154845462000098565b84620000d4565b602080601f8311600181146200019357600084156200017a5750858301515b600019600386901b1c1916600185901b1785556200011e565b600085815260208120601f198616915b82811015620001c457888601518255948401946001909101908401620001a3565b5085821015620001e35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051610e666200020f60003960006105190152610e666000f3fe6080604052600436106100dd5760003560e01c80634af18f4f1161007f578063a457c2d711610059578063a457c2d714610245578063a9059cbb14610265578063d96a094a14610285578063dd62ed3e1461029857600080fd5b80634af18f4f146101da57806370a08231146101fa57806395d89b411461023057600080fd5b806323b872dd116100bb57806323b872dd1461015c5780632e1a7d4d1461017c578063313ce5671461019e57806339509351146101ba57600080fd5b806306fdde03146100e2578063095ea7b31461010d57806318160ddd1461013d575b600080fd5b3480156100ee57600080fd5b506100f76102b8565b6040516101049190610c44565b60405180910390f35b34801561011957600080fd5b5061012d610128366004610cae565b61034a565b6040519015158152602001610104565b34801561014957600080fd5b506002545b604051908152602001610104565b34801561016857600080fd5b5061012d610177366004610cd8565b610364565b34801561018857600080fd5b5061019c610197366004610d14565b610388565b005b3480156101aa57600080fd5b5060405160128152602001610104565b3480156101c657600080fd5b5061012d6101d5366004610cae565b6104f0565b3480156101e657600080fd5b5061014e6101f5366004610d14565b610512565b34801561020657600080fd5b5061014e610215366004610d2d565b6001600160a01b031660009081526020819052604090205490565b34801561023c57600080fd5b506100f761053e565b34801561025157600080fd5b5061012d610260366004610cae565b61054d565b34801561027157600080fd5b5061012d610280366004610cae565b6105c8565b61019c610293366004610d14565b6105d6565b3480156102a457600080fd5b5061014e6102b3366004610d4f565b610686565b6060600380546102c790610d82565b80601f01602080910402602001604051908101604052809291908181526020018280546102f390610d82565b80156103405780601f1061031557610100808354040283529160200191610340565b820191906000526020600020905b81548152906001019060200180831161032357829003601f168201915b5050505050905090565b6000336103588185856106b1565b60019150505b92915050565b6000336103728582856107d5565b61037d858585610849565b506001949350505050565b6040516370a0823160e01b8152336004820152819030906370a0823190602401602060405180830381865afa1580156103c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e99190610dbc565b10156104485760405162461bcd60e51b815260206004820152602360248201527f42696f546f6b656e3a206e6f7420656e6f75676820746f6b656e7320746f2073604482015262195b1b60ea1b60648201526084015b60405180910390fd5b600061045382610512565b9050804710156104b45760405162461bcd60e51b815260206004820152602660248201527f42696f546f6b656e3a206e6f7420656e6f75676820657468657220746f20776960448201526574686472617760d01b606482015260840161043f565b6104be3383610a17565b604051339082156108fc029083906000818181858888f193505050501580156104eb573d6000803e3d6000fd5b505050565b6000336103588185856105038383610686565b61050d9190610deb565b6106b1565b600061035e7f000000000000000000000000000000000000000000000000000000000000000083610dfe565b6060600480546102c790610d82565b6000338161055b8286610686565b9050838110156105bb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161043f565b61037d82868684036106b1565b600033610358818585610849565b60006105e182610512565b9050803410156106335760405162461bcd60e51b815260206004820152601c60248201527f42696f546f6b656e3a20696e73756666696369656e7420657468657200000000604482015260640161043f565b61063d3383610b65565b60006106498234610e1d565b9050600181106104eb57604051339082156108fc029083906000818181858888f19350505050158015610680573d6000803e3d6000fd5b50505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166107135760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161043f565b6001600160a01b0382166107745760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161043f565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006107e18484610686565b90506000198114610680578181101561083c5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161043f565b61068084848484036106b1565b6001600160a01b0383166108ad5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161043f565b6001600160a01b03821661090f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161043f565b6001600160a01b038316600090815260208190526040902054818110156109875760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161043f565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906109be908490610deb565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a0a91815260200190565b60405180910390a3610680565b6001600160a01b038216610a775760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161043f565b6001600160a01b03821660009081526020819052604090205481811015610aeb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161043f565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610b1a908490610e1d565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6001600160a01b038216610bbb5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161043f565b8060026000828254610bcd9190610deb565b90915550506001600160a01b03821660009081526020819052604081208054839290610bfa908490610deb565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060208083528351808285015260005b81811015610c7157858101830151858201604001528201610c55565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610ca957600080fd5b919050565b60008060408385031215610cc157600080fd5b610cca83610c92565b946020939093013593505050565b600080600060608486031215610ced57600080fd5b610cf684610c92565b9250610d0460208501610c92565b9150604084013590509250925092565b600060208284031215610d2657600080fd5b5035919050565b600060208284031215610d3f57600080fd5b610d4882610c92565b9392505050565b60008060408385031215610d6257600080fd5b610d6b83610c92565b9150610d7960208401610c92565b90509250929050565b600181811c90821680610d9657607f821691505b602082108103610db657634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610dce57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561035e5761035e610dd5565b6000816000190483118215151615610e1857610e18610dd5565b500290565b8181038181111561035e5761035e610dd556fea2646970667358221220a11a6267c2595bc2ab11228c83e678e5a31070112b15aee861b35f1e125f6adf64736f6c63430008100033",
    "sourceMap": "530:1775:27:-:0;;;637:4;612:29;;648:40;;;;;;;;;;1978:113:14;;;;;;;;;;;;;-1:-1:-1;;;1978:113:14;;;;;;;;;;;;;;;;-1:-1:-1;;;1978:113:14;;;2052:5;2044;:13;;;;;;:::i;:::-;-1:-1:-1;2067:7:14;:17;2077:7;2067;:17;:::i;:::-;;1978:113;;530:1775:27;;14:127:32;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:380;225:1;221:12;;;;268;;;289:61;;343:4;335:6;331:17;321:27;;289:61;396:2;388:6;385:14;365:18;362:38;359:161;;442:10;437:3;433:20;430:1;423:31;477:4;474:1;467:15;505:4;502:1;495:15;359:161;;146:380;;;:::o;657:545::-;759:2;754:3;751:11;748:448;;;795:1;820:5;816:2;809:17;865:4;861:2;851:19;935:2;923:10;919:19;916:1;912:27;906:4;902:38;971:4;959:10;956:20;953:47;;;-1:-1:-1;994:4:32;953:47;1049:2;1044:3;1040:12;1037:1;1033:20;1027:4;1023:31;1013:41;;1104:82;1122:2;1115:5;1112:13;1104:82;;;1167:17;;;1148:1;1137:13;1104:82;;;1108:3;;;748:448;657:545;;;:::o;1378:1352::-;1498:10;;-1:-1:-1;;;;;1520:30:32;;1517:56;;;1553:18;;:::i;:::-;1582:97;1672:6;1632:38;1664:4;1658:11;1632:38;:::i;:::-;1626:4;1582:97;:::i;:::-;1734:4;;1798:2;1787:14;;1815:1;1810:663;;;;2517:1;2534:6;2531:89;;;-1:-1:-1;2586:19:32;;;2580:26;2531:89;-1:-1:-1;;1335:1:32;1331:11;;;1327:24;1323:29;1313:40;1359:1;1355:11;;;1310:57;2633:81;;1780:944;;1810:663;604:1;597:14;;;641:4;628:18;;-1:-1:-1;;1846:20:32;;;1964:236;1978:7;1975:1;1972:14;1964:236;;;2067:19;;;2061:26;2046:42;;2159:27;;;;2127:1;2115:14;;;;1994:19;;1964:236;;;1968:3;2228:6;2219:7;2216:19;2213:201;;;2289:19;;;2283:26;-1:-1:-1;;2372:1:32;2368:14;;;2384:3;2364:24;2360:37;2356:42;2341:58;2326:74;;2213:201;-1:-1:-1;;;;;2460:1:32;2444:14;;;2440:22;2427:36;;-1:-1:-1;1378:1352:32:o;:::-;530:1775:27;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080604052600436106100dd5760003560e01c80634af18f4f1161007f578063a457c2d711610059578063a457c2d714610245578063a9059cbb14610265578063d96a094a14610285578063dd62ed3e1461029857600080fd5b80634af18f4f146101da57806370a08231146101fa57806395d89b411461023057600080fd5b806323b872dd116100bb57806323b872dd1461015c5780632e1a7d4d1461017c578063313ce5671461019e57806339509351146101ba57600080fd5b806306fdde03146100e2578063095ea7b31461010d57806318160ddd1461013d575b600080fd5b3480156100ee57600080fd5b506100f76102b8565b6040516101049190610c44565b60405180910390f35b34801561011957600080fd5b5061012d610128366004610cae565b61034a565b6040519015158152602001610104565b34801561014957600080fd5b506002545b604051908152602001610104565b34801561016857600080fd5b5061012d610177366004610cd8565b610364565b34801561018857600080fd5b5061019c610197366004610d14565b610388565b005b3480156101aa57600080fd5b5060405160128152602001610104565b3480156101c657600080fd5b5061012d6101d5366004610cae565b6104f0565b3480156101e657600080fd5b5061014e6101f5366004610d14565b610512565b34801561020657600080fd5b5061014e610215366004610d2d565b6001600160a01b031660009081526020819052604090205490565b34801561023c57600080fd5b506100f761053e565b34801561025157600080fd5b5061012d610260366004610cae565b61054d565b34801561027157600080fd5b5061012d610280366004610cae565b6105c8565b61019c610293366004610d14565b6105d6565b3480156102a457600080fd5b5061014e6102b3366004610d4f565b610686565b6060600380546102c790610d82565b80601f01602080910402602001604051908101604052809291908181526020018280546102f390610d82565b80156103405780601f1061031557610100808354040283529160200191610340565b820191906000526020600020905b81548152906001019060200180831161032357829003601f168201915b5050505050905090565b6000336103588185856106b1565b60019150505b92915050565b6000336103728582856107d5565b61037d858585610849565b506001949350505050565b6040516370a0823160e01b8152336004820152819030906370a0823190602401602060405180830381865afa1580156103c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e99190610dbc565b10156104485760405162461bcd60e51b815260206004820152602360248201527f42696f546f6b656e3a206e6f7420656e6f75676820746f6b656e7320746f2073604482015262195b1b60ea1b60648201526084015b60405180910390fd5b600061045382610512565b9050804710156104b45760405162461bcd60e51b815260206004820152602660248201527f42696f546f6b656e3a206e6f7420656e6f75676820657468657220746f20776960448201526574686472617760d01b606482015260840161043f565b6104be3383610a17565b604051339082156108fc029083906000818181858888f193505050501580156104eb573d6000803e3d6000fd5b505050565b6000336103588185856105038383610686565b61050d9190610deb565b6106b1565b600061035e7f000000000000000000000000000000000000000000000000000000000000000083610dfe565b6060600480546102c790610d82565b6000338161055b8286610686565b9050838110156105bb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161043f565b61037d82868684036106b1565b600033610358818585610849565b60006105e182610512565b9050803410156106335760405162461bcd60e51b815260206004820152601c60248201527f42696f546f6b656e3a20696e73756666696369656e7420657468657200000000604482015260640161043f565b61063d3383610b65565b60006106498234610e1d565b9050600181106104eb57604051339082156108fc029083906000818181858888f19350505050158015610680573d6000803e3d6000fd5b50505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166107135760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161043f565b6001600160a01b0382166107745760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161043f565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006107e18484610686565b90506000198114610680578181101561083c5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161043f565b61068084848484036106b1565b6001600160a01b0383166108ad5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161043f565b6001600160a01b03821661090f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161043f565b6001600160a01b038316600090815260208190526040902054818110156109875760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161043f565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906109be908490610deb565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a0a91815260200190565b60405180910390a3610680565b6001600160a01b038216610a775760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161043f565b6001600160a01b03821660009081526020819052604090205481811015610aeb5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161043f565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610b1a908490610e1d565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6001600160a01b038216610bbb5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161043f565b8060026000828254610bcd9190610deb565b90915550506001600160a01b03821660009081526020819052604081208054839290610bfa908490610deb565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600060208083528351808285015260005b81811015610c7157858101830151858201604001528201610c55565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610ca957600080fd5b919050565b60008060408385031215610cc157600080fd5b610cca83610c92565b946020939093013593505050565b600080600060608486031215610ced57600080fd5b610cf684610c92565b9250610d0460208501610c92565b9150604084013590509250925092565b600060208284031215610d2657600080fd5b5035919050565b600060208284031215610d3f57600080fd5b610d4882610c92565b9392505050565b60008060408385031215610d6257600080fd5b610d6b83610c92565b9150610d7960208401610c92565b90509250929050565b600181811c90821680610d9657607f821691505b602082108103610db657634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610dce57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561035e5761035e610dd5565b6000816000190483118215151615610e1857610e18610dd5565b500290565b8181038181111561035e5761035e610dd556fea2646970667358221220a11a6267c2595bc2ab11228c83e678e5a31070112b15aee861b35f1e125f6adf64736f6c63430008100033",
    "sourceMap": "530:1775:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2156:98:14;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4433:197;;;;;;;;;;-1:-1:-1;4433:197:14;;;;;:::i;:::-;;:::i;:::-;;;1169:14:32;;1162:22;1144:41;;1132:2;1117:18;4433:197:14;1004:187:32;3244:106:14;;;;;;;;;;-1:-1:-1;3331:12:14;;3244:106;;;1342:25:32;;;1330:2;1315:18;3244:106:14;1196:177:32;5192:286:14;;;;;;;;;;-1:-1:-1;5192:286:14;;;;;:::i;:::-;;:::i;1435:603:27:-;;;;;;;;;;-1:-1:-1;1435:603:27;;;;;:::i;:::-;;:::i;:::-;;3093:91:14;;;;;;;;;;-1:-1:-1;3093:91:14;;3175:2;2038:36:32;;2026:2;2011:18;3093:91:14;1896:184:32;5873:234:14;;;;;;;;;;-1:-1:-1;5873:234:14;;;;;:::i;:::-;;:::i;2185:118:27:-;;;;;;;;;;-1:-1:-1;2185:118:27;;;;;:::i;:::-;;:::i;3408:125:14:-;;;;;;;;;;-1:-1:-1;3408:125:14;;;;;:::i;:::-;-1:-1:-1;;;;;3508:18:14;3482:7;3508:18;;;;;;;;;;;;3408:125;2367:102;;;;;;;;;;;;;:::i;6594:427::-;;;;;;;;;;-1:-1:-1;6594:427:14;;;;;:::i;:::-;;:::i;3729:189::-;;;;;;;;;;-1:-1:-1;3729:189:14;;;;;:::i;:::-;;:::i;862:390:27:-;;;;;;:::i;:::-;;:::i;3976:149:14:-;;;;;;;;;;-1:-1:-1;3976:149:14;;;;;:::i;:::-;;:::i;2156:98::-;2210:13;2242:5;2235:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2156:98;:::o;4433:197::-;4516:4;719:10:19;4570:32:14;719:10:19;4586:7:14;4595:6;4570:8;:32::i;:::-;4619:4;4612:11;;;4433:197;;;;;:::o;5192:286::-;5319:4;719:10:19;5375:38:14;5391:4;719:10:19;5406:6:14;5375:15;:38::i;:::-;5423:27;5433:4;5439:2;5443:6;5423:9;:27::i;:::-;-1:-1:-1;5467:4:14;;5192:286;-1:-1:-1;;;;5192:286:14:o;1435:603:27:-;1516:26;;-1:-1:-1;;;1516:26:27;;1531:10;1516:26;;;3072:51:32;1546:15:27;;1516:4;;:14;;3045:18:32;;1516:26:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:45;;1495:127;;;;-1:-1:-1;;;1495:127:27;;3525:2:32;1495:127:27;;;3507:21:32;3564:2;3544:18;;;3537:30;3603:34;3583:18;;;3576:62;-1:-1:-1;;;3654:18:32;;;3647:33;3697:19;;1495:127:27;;;;;;;;;1633:12;1648:30;1662:15;1648:13;:30::i;:::-;1633:45;;1735:4;1710:21;:29;;1689:114;;;;-1:-1:-1;;;1689:114:27;;3929:2:32;1689:114:27;;;3911:21:32;3968:2;3948:18;;;3941:30;4007:34;3987:18;;;3980:62;-1:-1:-1;;;4058:18:32;;;4051:36;4104:19;;1689:114:27;3727:402:32;1689:114:27;1852:34;1858:10;1870:15;1852:5;:34::i;:::-;1997;;2005:10;;1997:34;;;;;2026:4;;1997:34;;;;2026:4;2005:10;1997:34;;;;;;;;;;;;;;;;;;;;;1485:553;1435:603;:::o;5873:234:14:-;5961:4;719:10:19;6015:64:14;719:10:19;6031:7:14;6068:10;6040:25;719:10:19;6031:7:14;6040:9;:25::i;:::-;:38;;;;:::i;:::-;6015:8;:64::i;2185:118:27:-;2251:7;2277:19;2292:4;2277:12;:19;:::i;2367:102:14:-;2423:13;2455:7;2448:14;;;;;:::i;6594:427::-;6687:4;719:10:19;6687:4:14;6768:25;719:10:19;6785:7:14;6768:9;:25::i;:::-;6741:52;;6831:15;6811:16;:35;;6803:85;;;;-1:-1:-1;;;6803:85:14;;4771:2:32;6803:85:14;;;4753:21:32;4810:2;4790:18;;;4783:30;4849:34;4829:18;;;4822:62;-1:-1:-1;;;4900:18:32;;;4893:35;4945:19;;6803:85:14;4569:401:32;6803:85:14;6922:60;6931:5;6938:7;6966:15;6947:16;:34;6922:8;:60::i;3729:189::-;3808:4;719:10:19;3862:28:14;719:10:19;3879:2:14;3883:6;3862:9;:28::i;862:390:27:-;914:12;929:19;943:4;929:13;:19::i;:::-;914:34;;980:4;967:9;:17;;959:58;;;;-1:-1:-1;;;959:58:27;;5177:2:32;959:58:27;;;5159:21:32;5216:2;5196:18;;;5189:30;5255;5235:18;;;5228:58;5303:18;;959:58:27;4975:352:32;959:58:27;1066:23;1072:10;1084:4;1066:5;:23::i;:::-;1149:14;1166:16;1178:4;1166:9;:16;:::i;:::-;1149:33;;1206:1;1196:6;:11;1192:53;;1209:36;;1217:10;;1209:36;;;;;1238:6;;1209:36;;;;1238:6;1217:10;1209:36;;;;;;;;;;;;;;;;;;;;;904:348;;862:390;:::o;3976:149:14:-;-1:-1:-1;;;;;4091:18:14;;;4065:7;4091:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3976:149::o;10119:370::-;-1:-1:-1;;;;;10250:19:14;;10242:68;;;;-1:-1:-1;;;10242:68:14;;5667:2:32;10242:68:14;;;5649:21:32;5706:2;5686:18;;;5679:30;5745:34;5725:18;;;5718:62;-1:-1:-1;;;5796:18:32;;;5789:34;5840:19;;10242:68:14;5465:400:32;10242:68:14;-1:-1:-1;;;;;10328:21:14;;10320:68;;;;-1:-1:-1;;;10320:68:14;;6072:2:32;10320:68:14;;;6054:21:32;6111:2;6091:18;;;6084:30;6150:34;6130:18;;;6123:62;-1:-1:-1;;;6201:18:32;;;6194:32;6243:19;;10320:68:14;5870:398:32;10320:68:14;-1:-1:-1;;;;;10399:18:14;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10450:32;;1342:25:32;;;10450:32:14;;1315:18:32;10450:32:14;;;;;;;10119:370;;;:::o;10770:441::-;10900:24;10927:25;10937:5;10944:7;10927:9;:25::i;:::-;10900:52;;-1:-1:-1;;10966:16:14;:37;10962:243;;11047:6;11027:16;:26;;11019:68;;;;-1:-1:-1;;;11019:68:14;;6475:2:32;11019:68:14;;;6457:21:32;6514:2;6494:18;;;6487:30;6553:31;6533:18;;;6526:59;6602:18;;11019:68:14;6273:353:32;11019:68:14;11129:51;11138:5;11145:7;11173:6;11154:16;:25;11129:8;:51::i;7484:651::-;-1:-1:-1;;;;;7610:18:14;;7602:68;;;;-1:-1:-1;;;7602:68:14;;6833:2:32;7602:68:14;;;6815:21:32;6872:2;6852:18;;;6845:30;6911:34;6891:18;;;6884:62;-1:-1:-1;;;6962:18:32;;;6955:35;7007:19;;7602:68:14;6631:401:32;7602:68:14;-1:-1:-1;;;;;7688:16:14;;7680:64;;;;-1:-1:-1;;;7680:64:14;;7239:2:32;7680:64:14;;;7221:21:32;7278:2;7258:18;;;7251:30;7317:34;7297:18;;;7290:62;-1:-1:-1;;;7368:18:32;;;7361:33;7411:19;;7680:64:14;7037:399:32;7680:64:14;-1:-1:-1;;;;;7826:15:14;;7804:19;7826:15;;;;;;;;;;;7859:21;;;;7851:72;;;;-1:-1:-1;;;7851:72:14;;7643:2:32;7851:72:14;;;7625:21:32;7682:2;7662:18;;;7655:30;7721:34;7701:18;;;7694:62;-1:-1:-1;;;7772:18:32;;;7765:36;7818:19;;7851:72:14;7441:402:32;7851:72:14;-1:-1:-1;;;;;7957:15:14;;;:9;:15;;;;;;;;;;;7975:20;;;7957:38;;8015:13;;;;;;;;:23;;7989:6;;7957:9;8015:23;;7989:6;;8015:23;:::i;:::-;;;;;;;;8069:2;-1:-1:-1;;;;;8054:26:14;8063:4;-1:-1:-1;;;;;8054:26:14;;8073:6;8054:26;;;;1342:25:32;;1330:2;1315:18;;1196:177;8054:26:14;;;;;;;;8091:37;1435:603:27;9120:576:14;-1:-1:-1;;;;;9203:21:14;;9195:67;;;;-1:-1:-1;;;9195:67:14;;8050:2:32;9195:67:14;;;8032:21:32;8089:2;8069:18;;;8062:30;8128:34;8108:18;;;8101:62;-1:-1:-1;;;8179:18:32;;;8172:31;8220:19;;9195:67:14;7848:397:32;9195:67:14;-1:-1:-1;;;;;9358:18:14;;9333:22;9358:18;;;;;;;;;;;9394:24;;;;9386:71;;;;-1:-1:-1;;;9386:71:14;;8452:2:32;9386:71:14;;;8434:21:32;8491:2;8471:18;;;8464:30;8530:34;8510:18;;;8503:62;-1:-1:-1;;;8581:18:32;;;8574:32;8623:19;;9386:71:14;8250:398:32;9386:71:14;-1:-1:-1;;;;;9491:18:14;;:9;:18;;;;;;;;;;9512:23;;;9491:44;;9555:12;:22;;9529:6;;9491:9;9555:22;;9529:6;;9555:22;:::i;:::-;;;;-1:-1:-1;;9593:37:14;;1342:25:32;;;9619:1:14;;-1:-1:-1;;;;;9593:37:14;;;;;1330:2:32;1315:18;9593:37:14;;;;;;;1997:34:27;1485:553;1435:603;:::o;8411:389:14:-;-1:-1:-1;;;;;8494:21:14;;8486:65;;;;-1:-1:-1;;;8486:65:14;;8855:2:32;8486:65:14;;;8837:21:32;8894:2;8874:18;;;8867:30;8933:33;8913:18;;;8906:61;8984:18;;8486:65:14;8653:355:32;8486:65:14;8638:6;8622:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8654:18:14;;:9;:18;;;;;;;;;;:28;;8676:6;;8654:9;:28;;8676:6;;8654:28;:::i;:::-;;;;-1:-1:-1;;8697:37:14;;1342:25:32;;;-1:-1:-1;;;;;8697:37:14;;;8714:1;;8697:37;;1330:2:32;1315:18;8697:37:14;;;;;;;8411:389;;:::o;14:548:32:-;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:173::-;635:20;;-1:-1:-1;;;;;684:31:32;;674:42;;664:70;;730:1;727;720:12;664:70;567:173;;;:::o;745:254::-;813:6;821;874:2;862:9;853:7;849:23;845:32;842:52;;;890:1;887;880:12;842:52;913:29;932:9;913:29;:::i;:::-;903:39;989:2;974:18;;;;961:32;;-1:-1:-1;;;745:254:32:o;1378:328::-;1455:6;1463;1471;1524:2;1512:9;1503:7;1499:23;1495:32;1492:52;;;1540:1;1537;1530:12;1492:52;1563:29;1582:9;1563:29;:::i;:::-;1553:39;;1611:38;1645:2;1634:9;1630:18;1611:38;:::i;:::-;1601:48;;1696:2;1685:9;1681:18;1668:32;1658:42;;1378:328;;;;;:::o;1711:180::-;1770:6;1823:2;1811:9;1802:7;1798:23;1794:32;1791:52;;;1839:1;1836;1829:12;1791:52;-1:-1:-1;1862:23:32;;1711:180;-1:-1:-1;1711:180:32:o;2085:186::-;2144:6;2197:2;2185:9;2176:7;2172:23;2168:32;2165:52;;;2213:1;2210;2203:12;2165:52;2236:29;2255:9;2236:29;:::i;:::-;2226:39;2085:186;-1:-1:-1;;;2085:186:32:o;2276:260::-;2344:6;2352;2405:2;2393:9;2384:7;2380:23;2376:32;2373:52;;;2421:1;2418;2411:12;2373:52;2444:29;2463:9;2444:29;:::i;:::-;2434:39;;2492:38;2526:2;2515:9;2511:18;2492:38;:::i;:::-;2482:48;;2276:260;;;;;:::o;2541:380::-;2620:1;2616:12;;;;2663;;;2684:61;;2738:4;2730:6;2726:17;2716:27;;2684:61;2791:2;2783:6;2780:14;2760:18;2757:38;2754:161;;2837:10;2832:3;2828:20;2825:1;2818:31;2872:4;2869:1;2862:15;2900:4;2897:1;2890:15;2754:161;;2541:380;;;:::o;3134:184::-;3204:6;3257:2;3245:9;3236:7;3232:23;3228:32;3225:52;;;3273:1;3270;3263:12;3225:52;-1:-1:-1;3296:16:32;;3134:184;-1:-1:-1;3134:184:32:o;4134:127::-;4195:10;4190:3;4186:20;4183:1;4176:31;4226:4;4223:1;4216:15;4250:4;4247:1;4240:15;4266:125;4331:9;;;4352:10;;;4349:36;;;4365:18;;:::i;4396:168::-;4436:7;4502:1;4498;4494:6;4490:14;4487:1;4484:21;4479:1;4472:9;4465:17;4461:45;4458:71;;;4509:18;;:::i;:::-;-1:-1:-1;4549:9:32;;4396:168::o;5332:128::-;5399:9;;;5420:11;;;5417:37;;;5434:18;;:::i",
    "linkReferences": {},
    "immutableReferences": {
      "26984": [
        {
          "start": 1305,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "buy(uint256)": "d96a094a",
    "calculateCost(uint256)": "4af18f4f",
    "decimals()": "313ce567",
    "decreaseAllowance(address,uint256)": "a457c2d7",
    "increaseAllowance(address,uint256)": "39509351",
    "name()": "06fdde03",
    "symbol()": "95d89b41",
    "totalSupply()": "18160ddd",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd",
    "withdraw(uint256)": "2e1a7d4d"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numOfTokens\",\"type\":\"uint256\"}],\"name\":\"calculateCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"buy(uint256)\":{\"params\":{\"_amt\":\"the number of tokens to purchase\"}},\"calculateCost(uint256)\":{\"details\":\"Calculate the cost of tokens in wei\",\"params\":{\"_numOfTokens\":\"the number of tokens\"},\"returns\":{\"_0\":\"amount in wei\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"withdraw(uint256)\":{\"params\":{\"_numberOfTokens\":\"the amount of tokens to sell.\"}}},\"title\":\"BioToken Utility Token for the Bionet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buy(uint256)\":{\"notice\":\"Buy tokens with Ether.  Each purchase increases the overall supply of tokens.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw biotokens for Ether.  Selling decreases the overall supply of tokens.\"}},\"notice\":\"Utility token used by the Bionet. Exchange Ether for tokens using a simple fixed rate to determine the exchange cost. The BioToken reserve expands and contracts based on demand. NOTE: This is to be used for experimentation only\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/BioToken.sol\":\"BioToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzepplin-contracts/=lib/openzepplin-contracts/\",\":openzepplin/=lib/openzepplin-contracts/contracts/\"]},\"sources\":{\"lib/openzepplin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x17b6b6189de509d602776fab3d0924c576ec365e53e712d16bdc57b1538edadb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d8b3d9f1484e8ae7443a0a5e46f2faef362813f4fd6e0660d4b64725a16a990\",\"dweb:/ipfs/QmQVeGDmxWy5A4PfKKpNrrEjFTgwygS7xCTtySSMC7R4M8\"]},\"lib/openzepplin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824\",\"dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei\"]},\"lib/openzepplin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"lib/openzepplin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4632c341a06ba5c079b51ca5a915efab4e6ab57735b37839b3e8365ff806a43e\",\"dweb:/ipfs/QmTHT3xHYed2wajEoA5qu7ii2BxLpPhQZHwAhtLK5Z7ANK\"]},\"lib/openzepplin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]},\"lib/openzepplin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"src/tokens/BioToken.sol\":{\"keccak256\":\"0x628ba6fbcfeec69f6e59b044e25e0a306c9087fe47eeedbc23ca6d873a9dc70e\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://06de56bcb4b2811c7cfb852a304bbfa08a18dc73c4e001f616b15fefb4e36328\",\"dweb:/ipfs/QmVaDdFPi2oWbNZ9abbexXJRkRwJA8C247z6pS5SMKeV3w\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.16+commit.07a7930e"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_amt",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "buy"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_numOfTokens",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "calculateCost",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "decreaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "increaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_numberOfTokens",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdraw"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "buy(uint256)": {
            "params": {
              "_amt": "the number of tokens to purchase"
            }
          },
          "calculateCost(uint256)": {
            "details": "Calculate the cost of tokens in wei",
            "params": {
              "_numOfTokens": "the number of tokens"
            },
            "returns": {
              "_0": "amount in wei"
            }
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "decreaseAllowance(address,uint256)": {
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
          },
          "increaseAllowance(address,uint256)": {
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
          },
          "withdraw(uint256)": {
            "params": {
              "_numberOfTokens": "the amount of tokens to sell."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "buy(uint256)": {
            "notice": "Buy tokens with Ether.  Each purchase increases the overall supply of tokens."
          },
          "withdraw(uint256)": {
            "notice": "Withdraw biotokens for Ether.  Selling decreases the overall supply of tokens."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":openzepplin-contracts/=lib/openzepplin-contracts/",
        ":openzepplin/=lib/openzepplin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/tokens/BioToken.sol": "BioToken"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzepplin-contracts/contracts/token/ERC20/ERC20.sol": {
        "keccak256": "0x17b6b6189de509d602776fab3d0924c576ec365e53e712d16bdc57b1538edadb",
        "urls": [
          "bzz-raw://7d8b3d9f1484e8ae7443a0a5e46f2faef362813f4fd6e0660d4b64725a16a990",
          "dweb:/ipfs/QmQVeGDmxWy5A4PfKKpNrrEjFTgwygS7xCTtySSMC7R4M8"
        ],
        "license": "MIT"
      },
      "lib/openzepplin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2",
        "urls": [
          "bzz-raw://87a7a5d2f6f63f84598af02b8c50ca2df2631cb8ba2453e8d95fcb17e4be9824",
          "dweb:/ipfs/QmR76hqtAcRqoFj33tmNjcWTLrgNsAaakYwnKZ8zoJtKei"
        ],
        "license": "MIT"
      },
      "lib/openzepplin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
        "urls": [
          "bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
          "dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
        ],
        "license": "MIT"
      },
      "lib/openzepplin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
        "keccak256": "0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5",
        "urls": [
          "bzz-raw://4632c341a06ba5c079b51ca5a915efab4e6ab57735b37839b3e8365ff806a43e",
          "dweb:/ipfs/QmTHT3xHYed2wajEoA5qu7ii2BxLpPhQZHwAhtLK5Z7ANK"
        ],
        "license": "MIT"
      },
      "lib/openzepplin-contracts/contracts/utils/Address.sol": {
        "keccak256": "0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87",
        "urls": [
          "bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58",
          "dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV"
        ],
        "license": "MIT"
      },
      "lib/openzepplin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "src/tokens/BioToken.sol": {
        "keccak256": "0x628ba6fbcfeec69f6e59b044e25e0a306c9087fe47eeedbc23ca6d873a9dc70e",
        "urls": [
          "bzz-raw://06de56bcb4b2811c7cfb852a304bbfa08a18dc73c4e001f616b15fefb4e36328",
          "dweb:/ipfs/QmVaDdFPi2oWbNZ9abbexXJRkRwJA8C247z6pS5SMKeV3w"
        ],
        "license": "Apache-2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/tokens/BioToken.sol",
    "id": 27104,
    "exportedSymbols": {
      "Address": [
        25960
      ],
      "BioToken": [
        27103
      ],
      "Context": [
        25982
      ],
      "ERC20": [
        25338
      ],
      "IERC20": [
        25416
      ],
      "IERC20Metadata": [
        25441
      ],
      "SafeERC20": [
        25665
      ]
    },
    "nodeType": "SourceUnit",
    "src": "95:2211:27",
    "nodes": [
      {
        "id": 26976,
        "nodeType": "PragmaDirective",
        "src": "95:24:27",
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".16"
        ]
      },
      {
        "id": 26977,
        "nodeType": "ImportDirective",
        "src": "121:43:27",
        "absolutePath": "lib/openzepplin-contracts/contracts/token/ERC20/ERC20.sol",
        "file": "openzepplin/token/ERC20/ERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 27104,
        "sourceUnit": 25339,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 26978,
        "nodeType": "ImportDirective",
        "src": "165:53:27",
        "absolutePath": "lib/openzepplin-contracts/contracts/token/ERC20/utils/SafeERC20.sol",
        "file": "openzepplin/token/ERC20/utils/SafeERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 27104,
        "sourceUnit": 25666,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 27103,
        "nodeType": "ContractDefinition",
        "src": "530:1775:27",
        "nodes": [
          {
            "id": 26984,
            "nodeType": "VariableDeclaration",
            "src": "612:29:27",
            "constant": false,
            "mutability": "immutable",
            "name": "RATE",
            "nameLocation": "630:4:27",
            "scope": 27103,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 26982,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "612:7:27",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "31653135",
              "id": 26983,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "637:4:27",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1000000000000000_by_1",
                "typeString": "int_const 1000000000000000"
              },
              "value": "1e15"
            },
            "visibility": "internal"
          },
          {
            "id": 26992,
            "nodeType": "FunctionDefinition",
            "src": "648:40:27",
            "body": {
              "id": 26991,
              "nodeType": "Block",
              "src": "686:2:27",
              "statements": []
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "62696f746f6b656e",
                    "id": 26987,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "668:10:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_710f8f2d9c0a77c983b9fe90f85e839d596dde19d8a1a3c356b170f27fec7fcf",
                      "typeString": "literal_string \"biotoken\""
                    },
                    "value": "biotoken"
                  },
                  {
                    "hexValue": "4254",
                    "id": 26988,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "680:4:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_d9989bcc79bb076ebef271f7bf1a003ba3278e72bdc68debc653f8319b096dbd",
                      "typeString": "literal_string \"BT\""
                    },
                    "value": "BT"
                  }
                ],
                "id": 26989,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 26986,
                  "name": "ERC20",
                  "nameLocations": [
                    "662:5:27"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 25338,
                  "src": "662:5:27"
                },
                "nodeType": "ModifierInvocation",
                "src": "662:23:27"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 26985,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "659:2:27"
            },
            "returnParameters": {
              "id": 26990,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "686:0:27"
            },
            "scope": 27103,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 27039,
            "nodeType": "FunctionDefinition",
            "src": "862:390:27",
            "body": {
              "id": 27038,
              "nodeType": "Block",
              "src": "904:348:27",
              "statements": [
                {
                  "assignments": [
                    26999
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 26999,
                      "mutability": "mutable",
                      "name": "cost",
                      "nameLocation": "922:4:27",
                      "nodeType": "VariableDeclaration",
                      "scope": 27038,
                      "src": "914:12:27",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 26998,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "914:7:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 27003,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 27001,
                        "name": "_amt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26995,
                        "src": "943:4:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 27000,
                      "name": "calculateCost",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 27102,
                      "src": "929:13:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) pure returns (uint256)"
                      }
                    },
                    "id": 27002,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "929:19:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "914:34:27"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 27008,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 27005,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "967:3:27",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 27006,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "971:5:27",
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "967:9:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 27007,
                          "name": "cost",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26999,
                          "src": "980:4:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "967:17:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "42696f546f6b656e3a20696e73756666696369656e74206574686572",
                        "id": 27009,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "986:30:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_11ea56222a9819a0dfa6dc798a8e5a1af91c81d0ee4ae65214b6d2f523c9badb",
                          "typeString": "literal_string \"BioToken: insufficient ether\""
                        },
                        "value": "BioToken: insufficient ether"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_11ea56222a9819a0dfa6dc798a8e5a1af91c81d0ee4ae65214b6d2f523c9badb",
                          "typeString": "literal_string \"BioToken: insufficient ether\""
                        }
                      ],
                      "id": 27004,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "959:7:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 27010,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "959:58:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27011,
                  "nodeType": "ExpressionStatement",
                  "src": "959:58:27"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 27013,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "1072:3:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 27014,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1076:6:27",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1072:10:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 27015,
                        "name": "_amt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 26995,
                        "src": "1084:4:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 27012,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25155,
                      "src": "1066:5:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 27016,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1066:23:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27017,
                  "nodeType": "ExpressionStatement",
                  "src": "1066:23:27"
                },
                {
                  "assignments": [
                    27019
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 27019,
                      "mutability": "mutable",
                      "name": "change",
                      "nameLocation": "1157:6:27",
                      "nodeType": "VariableDeclaration",
                      "scope": 27038,
                      "src": "1149:14:27",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 27018,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1149:7:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 27024,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 27023,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 27020,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "1166:3:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 27021,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1170:5:27",
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "src": "1166:9:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "-",
                    "rightExpression": {
                      "id": 27022,
                      "name": "cost",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26999,
                      "src": "1178:4:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1166:16:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1149:33:27"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 27027,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 27025,
                      "name": "change",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 27019,
                      "src": "1196:6:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "hexValue": "31",
                      "id": 27026,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1206:1:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1196:11:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 27037,
                  "nodeType": "IfStatement",
                  "src": "1192:53:27",
                  "trueBody": {
                    "expression": {
                      "arguments": [
                        {
                          "id": 27034,
                          "name": "change",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 27019,
                          "src": "1238:6:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 27030,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "1217:3:27",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 27031,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1221:6:27",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1217:10:27",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 27029,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1209:8:27",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_payable_$",
                              "typeString": "type(address payable)"
                            },
                            "typeName": {
                              "id": 27028,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1209:8:27",
                              "stateMutability": "payable",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 27032,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1209:19:27",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "id": 27033,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1229:8:27",
                        "memberName": "transfer",
                        "nodeType": "MemberAccess",
                        "src": "1209:28:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                          "typeString": "function (uint256)"
                        }
                      },
                      "id": 27035,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1209:36:27",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 27036,
                    "nodeType": "ExpressionStatement",
                    "src": "1209:36:27"
                  }
                }
              ]
            },
            "documentation": {
              "id": 26993,
              "nodeType": "StructuredDocumentation",
              "src": "694:163:27",
              "text": " @notice Buy tokens with Ether.  Each purchase\n increases the overall supply of tokens.\n @param _amt the number of tokens to purchase"
            },
            "functionSelector": "d96a094a",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "buy",
            "nameLocation": "871:3:27",
            "parameters": {
              "id": 26996,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 26995,
                  "mutability": "mutable",
                  "name": "_amt",
                  "nameLocation": "883:4:27",
                  "nodeType": "VariableDeclaration",
                  "scope": 27039,
                  "src": "875:12:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 26994,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "875:7:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "874:14:27"
            },
            "returnParameters": {
              "id": 26997,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "904:0:27"
            },
            "scope": 27103,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 27089,
            "nodeType": "FunctionDefinition",
            "src": "1435:603:27",
            "body": {
              "id": 27088,
              "nodeType": "Block",
              "src": "1485:553:27",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 27052,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 27048,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "1531:3:27",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 27049,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1535:6:27",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1531:10:27",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "id": 27046,
                              "name": "this",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -28,
                              "src": "1516:4:27",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_BioToken_$27103",
                                "typeString": "contract BioToken"
                              }
                            },
                            "id": 27047,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1521:9:27",
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 24851,
                            "src": "1516:14:27",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 27050,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1516:26:27",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 27051,
                          "name": "_numberOfTokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 27042,
                          "src": "1546:15:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1516:45:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "42696f546f6b656e3a206e6f7420656e6f75676820746f6b656e7320746f2073656c6c",
                        "id": 27053,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1575:37:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_5a4ff6900745ea1db049417946096b23f1396d10336fea9603f7d89e97a46fd3",
                          "typeString": "literal_string \"BioToken: not enough tokens to sell\""
                        },
                        "value": "BioToken: not enough tokens to sell"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_5a4ff6900745ea1db049417946096b23f1396d10336fea9603f7d89e97a46fd3",
                          "typeString": "literal_string \"BioToken: not enough tokens to sell\""
                        }
                      ],
                      "id": 27045,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1495:7:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 27054,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1495:127:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27055,
                  "nodeType": "ExpressionStatement",
                  "src": "1495:127:27"
                },
                {
                  "assignments": [
                    27057
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 27057,
                      "mutability": "mutable",
                      "name": "cost",
                      "nameLocation": "1641:4:27",
                      "nodeType": "VariableDeclaration",
                      "scope": 27088,
                      "src": "1633:12:27",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 27056,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1633:7:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 27061,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 27059,
                        "name": "_numberOfTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 27042,
                        "src": "1662:15:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 27058,
                      "name": "calculateCost",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 27102,
                      "src": "1648:13:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) pure returns (uint256)"
                      }
                    },
                    "id": 27060,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1648:30:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1633:45:27"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 27069,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 27065,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "1718:4:27",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_BioToken_$27103",
                                  "typeString": "contract BioToken"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_BioToken_$27103",
                                  "typeString": "contract BioToken"
                                }
                              ],
                              "id": 27064,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1710:7:27",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 27063,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1710:7:27",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 27066,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1710:13:27",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 27067,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "1724:7:27",
                          "memberName": "balance",
                          "nodeType": "MemberAccess",
                          "src": "1710:21:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 27068,
                          "name": "cost",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 27057,
                          "src": "1735:4:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1710:29:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "42696f546f6b656e3a206e6f7420656e6f75676820657468657220746f207769746864726177",
                        "id": 27070,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1753:40:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7d6aa53024b7ebf814c81ed3c712cacc84027305d9e88a60ecf7c8251572f39e",
                          "typeString": "literal_string \"BioToken: not enough ether to withdraw\""
                        },
                        "value": "BioToken: not enough ether to withdraw"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_7d6aa53024b7ebf814c81ed3c712cacc84027305d9e88a60ecf7c8251572f39e",
                          "typeString": "literal_string \"BioToken: not enough ether to withdraw\""
                        }
                      ],
                      "id": 27062,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1689:7:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 27071,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1689:114:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27072,
                  "nodeType": "ExpressionStatement",
                  "src": "1689:114:27"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 27074,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "1858:3:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 27075,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "1862:6:27",
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "1858:10:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 27076,
                        "name": "_numberOfTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 27042,
                        "src": "1870:15:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 27073,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 25227,
                      "src": "1852:5:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 27077,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1852:34:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27078,
                  "nodeType": "ExpressionStatement",
                  "src": "1852:34:27"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 27085,
                        "name": "cost",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 27057,
                        "src": "2026:4:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "expression": {
                              "id": 27081,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "2005:3:27",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 27082,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "2009:6:27",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "2005:10:27",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 27080,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1997:8:27",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_payable_$",
                            "typeString": "type(address payable)"
                          },
                          "typeName": {
                            "id": 27079,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1997:8:27",
                            "stateMutability": "payable",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 27083,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1997:19:27",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 27084,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2017:8:27",
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "src": "1997:28:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 27086,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1997:34:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 27087,
                  "nodeType": "ExpressionStatement",
                  "src": "1997:34:27"
                }
              ]
            },
            "documentation": {
              "id": 27040,
              "nodeType": "StructuredDocumentation",
              "src": "1258:172:27",
              "text": " @notice Withdraw biotokens for Ether.  Selling\n decreases the overall supply of tokens.\n @param _numberOfTokens the amount of tokens to sell."
            },
            "functionSelector": "2e1a7d4d",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "1444:8:27",
            "parameters": {
              "id": 27043,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27042,
                  "mutability": "mutable",
                  "name": "_numberOfTokens",
                  "nameLocation": "1461:15:27",
                  "nodeType": "VariableDeclaration",
                  "scope": 27089,
                  "src": "1453:23:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27041,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1453:7:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1452:25:27"
            },
            "returnParameters": {
              "id": 27044,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1485:0:27"
            },
            "scope": 27103,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 27102,
            "nodeType": "FunctionDefinition",
            "src": "2185:118:27",
            "body": {
              "id": 27101,
              "nodeType": "Block",
              "src": "2260:43:27",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 27099,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 27097,
                      "name": "_numOfTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 27092,
                      "src": "2277:12:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "*",
                    "rightExpression": {
                      "id": 27098,
                      "name": "RATE",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26984,
                      "src": "2292:4:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2277:19:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 27096,
                  "id": 27100,
                  "nodeType": "Return",
                  "src": "2270:26:27"
                }
              ]
            },
            "documentation": {
              "id": 27090,
              "nodeType": "StructuredDocumentation",
              "src": "2044:136:27",
              "text": " @dev Calculate the cost of tokens in wei\n @param _numOfTokens the number of tokens\n @return amount in wei"
            },
            "functionSelector": "4af18f4f",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "calculateCost",
            "nameLocation": "2194:13:27",
            "parameters": {
              "id": 27093,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27092,
                  "mutability": "mutable",
                  "name": "_numOfTokens",
                  "nameLocation": "2216:12:27",
                  "nodeType": "VariableDeclaration",
                  "scope": 27102,
                  "src": "2208:20:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27091,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2208:7:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2207:22:27"
            },
            "returnParameters": {
              "id": 27096,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 27095,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 27102,
                  "src": "2251:7:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 27094,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2251:7:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2250:9:27"
            },
            "scope": 27103,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 26980,
              "name": "ERC20",
              "nameLocations": [
                "551:5:27"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 25338,
              "src": "551:5:27"
            },
            "id": 26981,
            "nodeType": "InheritanceSpecifier",
            "src": "551:5:27"
          }
        ],
        "canonicalName": "BioToken",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 26979,
          "nodeType": "StructuredDocumentation",
          "src": "220:309:27",
          "text": " @title BioToken Utility Token for the Bionet\n @notice Utility token used by the Bionet. Exchange Ether for\n tokens using a simple fixed rate to determine the exchange cost.\n The BioToken reserve expands and contracts based on demand.\n NOTE: This is to be used for experimentation only"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          27103,
          25338,
          25441,
          25416,
          25982
        ],
        "name": "BioToken",
        "nameLocation": "539:8:27",
        "scope": 27104,
        "usedErrors": []
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 27
}